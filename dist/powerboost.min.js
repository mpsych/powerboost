
function $parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});
}

      var $parcel$global = globalThis;
    
var $parcel$modules = {};
var $parcel$inits = {};

var parcelRequire = $parcel$global["parcelRequire94c2"];

if (parcelRequire == null) {
  parcelRequire = function(id) {
    if (id in $parcel$modules) {
      return $parcel$modules[id].exports;
    }
    if (id in $parcel$inits) {
      var init = $parcel$inits[id];
      delete $parcel$inits[id];
      var module = {id: id, exports: {}};
      $parcel$modules[id] = module;
      init.call(module.exports, module, module.exports);
      return module.exports;
    }
    var err = new Error("Cannot find module '" + id + "'");
    err.code = 'MODULE_NOT_FOUND';
    throw err;
  };

  parcelRequire.register = function register(id, init) {
    $parcel$inits[id] = init;
  };

  $parcel$global["parcelRequire94c2"] = parcelRequire;
}

var parcelRegister = parcelRequire.register;
parcelRegister("c6odg", function(module, exports) {

$parcel$export(module.exports, "Editor", () => Editor);
class Editor {
    constructor(pane){
        this.pane = pane;
        this.codeFolder = null;
        this.codeState = {
            value: 'Boostlet.init();\nconsole.log(Boostlet.framework.name);',
            output: ''
        };
    }
    init() {
        // Create Code Editor folder
        this.codeFolder = this.pane.addFolder({
            title: 'Code Editor',
            expanded: true
        });
        // Add code input with v4 syntax
        this.codeFolder.addBinding(this.codeState, 'value', {
            label: 'Code',
            view: 'textarea',
            rows: 6,
            placeholder: 'Enter your code here'
        });
        // Add run button
        this.codeFolder.addButton({
            title: 'Run Code'
        }).on('click', ()=>this.runCode());
        // Add output binding
        this.codeFolder.addBinding(this.codeState, 'output', {
            label: 'Output',
            multiline: true,
            rows: 6,
            readonly: true
        });
    }
    runCode() {
        try {
            // Capture console.log output
            const originalLog = console.log;
            let output = '';
            console.log = (message)=>{
                output += message + '\n';
                originalLog(message);
            };
            // Run the code
            eval(this.codeState.value);
            // Update output and restore console.log
            this.codeState.output = output;
            console.log = originalLog;
        } catch (e) {
            this.codeState.output = e.toString();
        }
    }
}

});

class $ee836499a8d015e0$export$e1e795cef0e670e6 {
    constructor(pane){
        this.pane = pane;
        this.categories = [];
        this.examples = new Map();
        this.repoOwner = 'mpsych';
        this.repoName = 'boostlet';
        this.folderPath = 'examples';
        this.apiUrl = `https://api.github.com/repos/${this.repoOwner}/${this.repoName}/contents/${this.folderPath}`;
        // State for category selection
        this.state = {
            selectedCategory: '',
            currentExamples: []
        };
    }
    async init() {
        const filesByCategory = await this.fetchBoostletFiles();
        this.categories = Object.keys(filesByCategory);
        this.examples = new Map(Object.entries(filesByCategory));
        this.createBoostletsUI();
    }
    createBoostletsUI() {
        // Create main Boostlets folder
        const boostletsFolder = this.pane.addFolder({
            title: 'Boostlets',
            expanded: true
        });
        // Add category dropdown with empty option
        boostletsFolder.addBinding(this.state, 'selectedCategory', {
            label: 'Category',
            options: {
                'Select a category': '',
                ...this.categories.reduce((acc, cat)=>{
                    acc[cat] = cat;
                    return acc;
                }, {})
            }
        }).on('change', (ev)=>{
            // Update examples when category changes
            this.state.currentExamples = ev.value ? this.examples.get(ev.value) || [] : [];
            this.updateExampleButtons(boostletsFolder);
        });
        // Initial empty state - no buttons
        this.updateExampleButtons(boostletsFolder);
    }
    updateExampleButtons(folder) {
        // Remove existing example buttons if any
        const existingButtons = folder.children.filter((child)=>child.element.classList.contains('example-button'));
        existingButtons.forEach((button)=>folder.remove(button));
        // Add new buttons for current examples
        this.state.currentExamples.forEach((example)=>{
            const btn = folder.addButton({
                title: example
            }).on('click', ()=>{
                this.loadExample(example);
            });
            // Add class for identification without using label
            btn.element.classList.add('example-button');
        });
    }
    loadExample(exampleName) {
        const baseUrl = 'https://boostlet.org/examples/';
        const script = document.createElement('script');
        script.src = `${baseUrl}${exampleName.replace(/\s+/g, '').toLowerCase()}.js`;
        document.head.appendChild(script);
    }
    async fetchBoostletFiles() {
        try {
            const response = await fetch(this.apiUrl);
            const files = await response.json();
            const filesByCategory = {};
            await Promise.all(files.map(async (file)=>{
                if (file.type === "file" && file.name.endsWith(".js")) {
                    const fileName = file.name;
                    const fileNameEdit = fileName.substring(fileName.lastIndexOf('/') + 1, fileName.lastIndexOf('.'));
                    const category = await this.getCategoryFromFile(file.download_url);
                    if (!filesByCategory[category]) filesByCategory[category] = [];
                    filesByCategory[category].push(fileNameEdit);
                }
            }));
            return filesByCategory;
        } catch (error) {
            console.error('Error fetching files:', error);
            return {};
        }
    }
    async getCategoryFromFile(downloadUrl) {
        try {
            const response = await fetch(downloadUrl);
            const scriptText = await response.text();
            const categoryRegex = /CATEGORY\s*=\s*["']([^"']+)["']/;
            const match = categoryRegex.exec(scriptText);
            return match ? match[1] : "Others";
        } catch (error) {
            console.error('Error fetching category:', error);
            return "Others";
        }
    }
}



var $c6odg = parcelRequire("c6odg");
class $c657645b9ba500f7$export$9cf5eb8cd6a286 {
    constructor(){
        this.pane = null;
        this.editor = null;
        this.categories = null;
    }
    async init() {
        try {
            // Load Boostlet first
            await this.loadBoostlet();
            // Create main Tweakpane instance
            this.pane = new Pane({
                container: document.body,
                title: 'PowerBoost',
                expanded: true
            });
            this.pane.registerPlugin(TextareaPlugin);
            // Position the pane
            const paneElement = this.pane.element;
            paneElement.classList.add('powerboost-pane');
            Object.assign(paneElement.style, {
                position: 'fixed',
                bottom: '10px',
                right: '10px',
                zIndex: '9999'
            });
            // Initialize Boostlet
            Boostlet.init();
            // Initialize components
            this.categories = new (0, $ee836499a8d015e0$export$e1e795cef0e670e6)(this.pane);
            await this.categories.init();
            this.editor = new (0, $c6odg.Editor)(this.pane);
            this.editor.init();
        } catch (error) {
            console.error('Error in Powerboost init:', error);
            throw error;
        }
    }
    loadBoostlet() {
        return new Promise((resolve, reject)=>{
            const script = document.createElement('script');
            script.src = 'https://mpsych.github.io/boostlet/dist/boostlet.min.js';
            script.onload = resolve;
            script.onerror = reject;
            document.head.appendChild(script);
        });
    }
}


// register global namespace
window.Powerboost = new (0, $c657645b9ba500f7$export$9cf5eb8cd6a286)();
// Initialize immediately since Tweakpane is already loaded
window.Powerboost.init().catch((error)=>{
    console.error('Error initializing Powerboost:', error);
});


//# sourceMappingURL=powerboost.min.js.map
